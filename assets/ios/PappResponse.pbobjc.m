// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PAppResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PappResponse.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PappResponseRoot

@implementation PappResponseRoot

@end

#pragma mark - PappResponseRoot_FileDescriptor

static GPBFileDescriptor *PappResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - PAppResponse

@implementation PAppResponse

@dynamic hasMsg, msg;
@dynamic hasSessionId, sessionId;
@dynamic hasVersion, version;
@dynamic hasCode, code;
@dynamic hasTotal, total;
@dynamic dataArray, dataArray_Count;
@dynamic errorsArray, errorsArray_Count;

typedef struct PAppResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t version;
  int32_t code;
  int32_t total;
  NSString *msg;
  NSString *sessionId;
  NSMutableArray *dataArray;
  NSMutableArray *errorsArray;
} PAppResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = PAppResponse_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAppResponse__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = PAppResponse_FieldNumber_SessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PAppResponse__storage_, sessionId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PAppResponse_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PAppResponse__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PAppResponse_FieldNumber_Code,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PAppResponse__storage_, code),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PAppResponse_FieldNumber_Total,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PAppResponse__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.className = NULL,
        .number = PAppResponse_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PAppResponse__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "errorsArray",
        .dataTypeSpecific.className = NULL,
        .number = PAppResponse_FieldNumber_ErrorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PAppResponse__storage_, errorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAppResponse class]
                                     rootClass:[PappResponseRoot class]
                                          file:PappResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAppResponse__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
